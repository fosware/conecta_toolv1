generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                 Int                                  @id @default(autoincrement())
  email                              String
  password                           String
  username                           String
  roleId                             Int
  role                               Role                                 @relation(fields: [roleId], references: [id])
  profile                            Profile?
  isActive                           Boolean                              @default(true)
  isDeleted                          Boolean                              @default(false)
  dateDeleted                        DateTime?
  createdAt                          DateTime                             @default(now())
  updatedAt                          DateTime                             @updatedAt
  Specialties                        Specialties[]
  Scopes                             Scopes[]
  Subscopes                          Subscopes[]
  Cerifications                      Certifications[]
  companies                          Company[]
  CompanyCertifications              CompanyCertifications[]
  CompanySpecialties                 CompanySpecialties[]
  CompanyUser                        CompanyUser[]
  Clients                            Clients[]
  //Projects                      Project[]
  //projectQuotes                 ProjectQuote[]
  //ProjectRequest                ProjectRequest[]
  //ProjectRequestDetails         ProjectRequestDetails[]
  //RequirementCertification      RequirementCertification[]
  //RequirementSpecialty          RequirementSpecialty[]
  //ProjectRequestDetailCompanies ProjectRequestDetailCompanies[]
  //ProjectRequestDetailNDA       ProjectRequestDetailNDA[]
  //ProjectRequestDetailDocuments ProjectRequestDetailDocuments[]
  //ProjectRequestDetailQuotation ProjectRequestDetailQuotation[]
  ProjectRequest                     ProjectRequest[]
  RequirementCertification           RequirementCertification[]
  RequirementSpecialty               RequirementSpecialty[]
  ProjectRequestCompany              ProjectRequestCompany[]
  ProjectRequestRequirementNDA       ProjectRequestRequirementNDA[]
  ProjectRequestRequirementDocuments ProjectRequestRequirementDocuments[]
  ProjectRequestRequirementQuotation ProjectRequestRequirementQuotation[]

  @@unique([email, isDeleted])
  @@unique([username, isDeleted])
  @@index([isDeleted, isActive])
  @@map("d_users")
}

model Specialties {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique
  num                  Int                    @unique
  description          String?
  isActive             Boolean                @default(true)
  isDeleted            Boolean                @default(false)
  dateDeleted          DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  userId               Int
  user                 User                   @relation(fields: [userId], references: [id])
  Scopes               Scopes[]
  CompanySpecialties   CompanySpecialties[]
  RequirementSpecialty RequirementSpecialty[]

  @@index([isDeleted, isActive])
  @@map("c_specialties")
}

model Scopes {
  id                   Int                    @id @default(autoincrement())
  name                 String
  num                  Int
  description          String?
  isActive             Boolean                @default(true)
  isDeleted            Boolean                @default(false)
  dateDeleted          DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  userId               Int
  specialtyId          Int
  user                 User                   @relation(fields: [userId], references: [id])
  specialty            Specialties            @relation(fields: [specialtyId], references: [id])
  Subscopes            Subscopes[]
  CompanySpecialties   CompanySpecialties[]
  RequirementSpecialty RequirementSpecialty[]

  @@unique([name, specialtyId], name: "unique_name_per_specialty")
  @@index([isDeleted, isActive])
  @@map("c_scopes")
}

model Subscopes {
  id                   Int                    @id @default(autoincrement())
  name                 String
  num                  Int
  isActive             Boolean                @default(true)
  isDeleted            Boolean                @default(false)
  dateDeleted          DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  userId               Int
  scopeId              Int
  user                 User                   @relation(fields: [userId], references: [id])
  scope                Scopes                 @relation(fields: [scopeId], references: [id])
  CompanySpecialties   CompanySpecialties[]
  RequirementSpecialty RequirementSpecialty[]

  @@unique([name, scopeId], name: "unique_name_per_scope")
  @@index([isDeleted, isActive])
  @@map("c_subscopes")
}

model Certifications {
  id                        Int                        @id @default(autoincrement())
  name                      String                     @unique
  description               String?
  isActive                  Boolean                    @default(true)
  isDeleted                 Boolean                    @default(false)
  dateDeleted               DateTime?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  userId                    Int
  user                      User                       @relation(fields: [userId], references: [id])
  CompanyCertifications     CompanyCertifications[]
  requirementCertifications RequirementCertification[]

  @@index([isDeleted, isActive])
  @@map("c_certifications")
}

model Profile {
  id              Int     @id @default(autoincrement())
  name            String
  first_lastname  String
  second_lastname String?
  phone           String?
  image_profile   String?
  userId          Int     @unique
  user            User    @relation(fields: [userId], references: [id])

  @@map("d_profiles")
}

model Role {
  id         Int             @id @default(autoincrement())
  name       String          @unique
  prefix     String
  users      User[]
  privileges RolePrivilege[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@map("c_roles")
}

model RolePrivilege {
  id          Int       @id @default(autoincrement())
  roleId      Int
  privilegeId Int
  role        Role      @relation(fields: [roleId], references: [id])
  privilege   Privilege @relation(fields: [privilegeId], references: [id])

  @@unique([roleId, privilegeId])
  @@map("r_role_privileges")
}

model Privilege {
  id        Int             @id @default(autoincrement())
  name      String          @unique
  roles     RolePrivilege[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("c_privileges")
}

model LocationState {
  id        Int       @id @default(autoincrement())
  name      String
  country   String    @default("México")
  companies Company[]

  @@unique([name, country], name: "name_country")
  @@map("c_location_states")
}

// Empresa
model Company {
  id                     Int                     @id @default(autoincrement())
  companyName            String                  @unique
  comercialName          String                  @unique
  contactName            String
  street                 String
  externalNumber         String
  internalNumber         String?
  neighborhood           String
  postalCode             String
  city                   String
  stateId                Int
  phone                  String
  website                String?
  email                  String                  @unique
  machineCount           Int
  employeeCount          Int
  shifts                 String?
  achievementDescription String?
  profile                String?
  shiftsProfileLink      String?
  nda                    Bytes?
  ndaFileName            String?
  companyLogo            String?
  isActive               Boolean                 @default(true)
  isDeleted              Boolean                 @default(false)
  dateDeleted            DateTime?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  userId                 Int?
  user                   User?                   @relation(fields: [userId], references: [id])
  locationState          LocationState           @relation(fields: [stateId], references: [id])
  CompanyCertifications  CompanyCertifications[]
  CompanySpecialties     CompanySpecialties[]
  CompanyUser            CompanyUser[]
  //projectQuotes                 ProjectQuote[]
  //ProjectRequestDetailCompanies ProjectRequestDetailCompanies[]
  ProjectRequestCompany  ProjectRequestCompany[]

  @@index([isDeleted, isActive])
  @@map("d_companies")
}

// Relación entre empresas y certificaciones
model CompanyCertifications {
  id                  Int            @id @default(autoincrement())
  companyId           Int
  certificationId     Int
  certificateFile     Bytes?
  certificateFileName String?
  expirationDate      DateTime?      @db.Date
  isCommitment        Boolean        @default(false)
  commitmentDate      DateTime?      @db.Date
  isActive            Boolean        @default(true)
  isDeleted           Boolean        @default(false)
  dateDeleted         DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  userId              Int
  user                User           @relation(fields: [userId], references: [id])
  company             Company        @relation(fields: [companyId], references: [id])
  certification       Certifications @relation(fields: [certificationId], references: [id])

  @@index([isDeleted, isActive])
  @@index([companyId, certificationId, expirationDate])
  @@map("r_company_certifications")
}

// Relación entre empresas y especialidades
model CompanySpecialties {
  id              Int         @id @default(autoincrement())
  companyId       Int
  specialtyId     Int
  scopeId         Int?
  subscopeId      Int?
  materials       String?
  machineCapacity String?
  isActive        Boolean     @default(true)
  isDeleted       Boolean     @default(false)
  dateDeleted     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  company         Company     @relation(fields: [companyId], references: [id])
  specialty       Specialties @relation(fields: [specialtyId], references: [id])
  scope           Scopes?     @relation(fields: [scopeId], references: [id])
  subscope        Subscopes?  @relation(fields: [subscopeId], references: [id])

  @@unique([companyId, specialtyId, scopeId, subscopeId])
  @@index([isDeleted, isActive])
  @@map("r_company_specialties")
}

// Relación entre empresas y usuarios
model CompanyUser {
  id          Int       @id @default(autoincrement())
  companyId   Int
  userId      Int
  roleCompany String? // Rol dentro de la empresa
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  dateDeleted DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  company     Company   @relation(fields: [companyId], references: [id])

  @@unique([companyId, userId])
  @@index([isDeleted, isActive])
  @@map("r_company_users")
}

// Vista para reporte de empresas, ver prisma/sql/create_views.sql
/**
 * model CompanyProfile {
 * id                   Int     @id
 * nombre_comercial     String
 * razon_social         String
 * logros               String?
 * semblanza            String?
 * contato_ventas       String?
 * maquinas_principales Int?
 * total_empleados      Int?
 * telefono             String?
 * correo               String?
 * liga_semblanza       String?
 * sitio_web            String?
 * certificaciones      Json
 * especialidades       Json
 * @@map("v_companies_overview") // Hace referencia a la vista en la BD
 * @@ignore
 * }
 */
//----------------------------------------------------

//------------------ SOLICITUDES ---------------------

// Tipos de proyecto
model ProjectTypes {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  dateDeleted DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // Project     Project[]

  @@index([isDeleted, isActive])
  @@map("c_project_types")
}

// Empresas cliente
model Clients {
  id                 Int           @id @default(autoincrement())
  name               String
  registered_address String
  rfc                String
  isActive           Boolean       @default(true)
  isDeleted          Boolean       @default(false)
  dateDeleted        DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  userId             Int
  user               User          @relation(fields: [userId], references: [id])
  //Project            Project[]
  ClientAreas        ClientAreas[]

  @@index([isDeleted, isActive])
  @@map("c_clients")
}

model ClientAreas {
  id             Int              @id @default(autoincrement())
  clientId       Int
  areaName       String
  contactName    String
  contactEmail   String
  contactPhone   String
  observations   String?
  isActive       Boolean          @default(true)
  isDeleted      Boolean          @default(false)
  dateDeleted    DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  client         Clients          @relation(fields: [clientId], references: [id])
  // Project        Project[]
  ProjectRequest ProjectRequest[]

  @@map("c_client_areas")
}

//------------------- Estos dos modelos se eliminaran ----------------
// Proyectos
/**
 * model Project {
 * id                        Int            @id @default(autoincrement())
 * name                      String
 * projectTypeId             Int
 * clientId                  Int
 * clientAreaId              Int
 * requestDate               DateTime       @default(now())
 * drawRequest               Bytes?
 * nameDrawRequest           String?
 * specialRequest            Boolean?
 * descriptionSpecialRequest String?
 * generalDescription        String?
 * isActive                  Boolean        @default(true)
 * isDeleted                 Boolean        @default(false)
 * dateDeleted               DateTime?
 * createdAt                 DateTime       @default(now())
 * updatedAt                 DateTime       @updatedAt
 * userId                    Int
 * projectType               ProjectTypes   @relation(fields: [projectTypeId], references: [id])
 * client                    Clients        @relation(fields: [clientId], references: [id])
 * clientArea                ClientAreas    @relation(fields: [clientAreaId], references: [id])
 * user                      User           @relation(fields: [userId], references: [id])
 * projectQuote              ProjectQuote[]
 * @@index([isDeleted, isActive])
 * @@map("d_projects")
 * }
 * // Cotizaciones de proyectos
 * model ProjectQuote {
 * id              Int       @id @default(autoincrement())
 * projectId       Int
 * companyId       Int
 * deadline        DateTime
 * itemDescription String // descripcion breve a cotizar
 * isActive        Boolean   @default(true)
 * isDeleted       Boolean   @default(false)
 * dateDeleted     DateTime?
 * createdAt       DateTime  @default(now())
 * updatedAt       DateTime  @updatedAt
 * userId          Int
 * user            User      @relation(fields: [userId], references: [id])
 * project         Project   @relation(fields: [projectId], references: [id])
 * company         Company   @relation(fields: [companyId], references: [id])
 * @@index([isDeleted, isActive])
 * @@map("d_project_quotes")
 * }
 */
//------------------------------------
// Modelo de solicitud de proyectos
model ProjectRequest {
  id                    Int                        @id @default(autoincrement())
  title                 String
  requestDate           DateTime                   @default(now())
  observation           String?
  isActive              Boolean                    @default(true)
  isDeleted             Boolean                    @default(false)
  dateDeleted           DateTime?
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  userId                Int
  user                  User                       @relation(fields: [userId], references: [id])
  clientAreaId          Int
  clientArea            ClientAreas                @relation(fields: [clientAreaId], references: [id])
  certifications        RequirementCertification[]
  specialties           RequirementSpecialty[]
  ProjectRequestCompany ProjectRequestCompany[]

  @@index([isDeleted, isActive])
  @@map("d_project_requests")
}

// Certificaciones requeridas por el proyecto
model RequirementCertification {
  id               Int            @id @default(autoincrement())
  projectRequestId Int
  certificationId  Int
  observation      String?
  isActive         Boolean        @default(true)
  isDeleted        Boolean        @default(false)
  dateDeleted      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userId           Int
  user             User           @relation(fields: [userId], references: [id])
  ProjectRequest   ProjectRequest @relation(fields: [projectRequestId], references: [id])
  certification    Certifications @relation(fields: [certificationId], references: [id])

  ndas ProjectRequestRequirementNDA[]

  @@index([isDeleted, isActive])
  @@map("d_project_request_certifications")
}

// Especialidades requeridas por el proyecto
model RequirementSpecialty {
  id               Int            @id @default(autoincrement())
  projectRequestId Int
  specialtyId      Int
  scopeId          Int?
  subscopeId       Int?
  observation      String?
  isActive         Boolean        @default(true)
  isDeleted        Boolean        @default(false)
  dateDeleted      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userId           Int
  user             User           @relation(fields: [userId], references: [id])
  ProjectRequest   ProjectRequest @relation(fields: [projectRequestId], references: [id])
  specialty        Specialties    @relation(fields: [specialtyId], references: [id])
  scope            Scopes?        @relation(fields: [scopeId], references: [id])
  subscope         Subscopes?     @relation(fields: [subscopeId], references: [id])

  ndas ProjectRequestRequirementNDA[]

  @@index([isDeleted, isActive])
  @@map("d_project_request_specialties")
}

// Asociados que cumplen los requisitos
model ProjectRequestCompany {
  id               Int            @id @default(autoincrement())
  projectRequestId Int
  companyId        Int
  isActive         Boolean        @default(true)
  isDeleted        Boolean        @default(false)
  dateDeleted      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userId           Int
  user             User           @relation(fields: [userId], references: [id])
  ProjectRequest   ProjectRequest @relation(fields: [projectRequestId], references: [id])
  Company          Company        @relation(fields: [companyId], references: [id])

  quotations ProjectRequestRequirementQuotation[]
  ndas       ProjectRequestRequirementNDA[]

  @@index([isDeleted, isActive])
  @@map("d_project_request_companies")
}

// NDA por requerimiento
model ProjectRequestRequirementNDA {
  id                         Int                                  @id @default(autoincrement())
  projectRequestCompanyId    Int
  requirementSpecialtyId     Int?
  requirementCertificationId Int?
  ndaFile                    String?
  createdAt                  DateTime                             @default(now())
  updatedAt                  DateTime                             @updatedAt
  userId                     Int
  isActive                   Boolean                              @default(true)
  isDeleted                  Boolean                              @default(false)
  dateDeleted                DateTime?
  ProjectRequestCompany      ProjectRequestCompany                @relation(fields: [projectRequestCompanyId], references: [id])
  RequirementSpecialty       RequirementSpecialty?                @relation(fields: [requirementSpecialtyId], references: [id])
  RequirementCertification   RequirementCertification?            @relation(fields: [requirementCertificationId], references: [id])
  documents                  ProjectRequestRequirementDocuments[]
  User                       User                                 @relation(fields: [userId], references: [id])

  @@index([isDeleted, isActive])
  @@map("d_project_request_ndas")
}

// Documentación técnica enviada por el cliente (solo si hay un NDA firmado)
model ProjectRequestRequirementDocuments {
  id                             Int                          @id @default(autoincrement())
  projectRequestRequirementNDAId Int
  documentFile                   String?
  documentFileName               String?
  createdAt                      DateTime                     @default(now())
  updatedAt                      DateTime                     @updatedAt
  userId                         Int
  user                           User                         @relation(fields: [userId], references: [id])
  isActive                       Boolean                      @default(true)
  isDeleted                      Boolean                      @default(false)
  dateDeleted                    DateTime?
  ProjectRequestRequirementNDA   ProjectRequestRequirementNDA @relation(fields: [projectRequestRequirementNDAId], references: [id])

  @@index([isDeleted, isActive])
  @@map("d_project_request_documents")
}

// Cotización por cada asociado por requerimiento
model ProjectRequestRequirementQuotation {
  id                      Int                   @id @default(autoincrement())
  projectRequestCompanyId Int
  quotationFile           String?
  quotationFileName       String?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  userId                  Int
  user                    User                  @relation(fields: [userId], references: [id])
  isActive                Boolean               @default(true)
  isDeleted               Boolean               @default(false)
  dateDeleted             DateTime?
  ProjectRequestCompany   ProjectRequestCompany @relation(fields: [projectRequestCompanyId], references: [id])

  @@index([isDeleted, isActive])
  @@map("d_project_request_quotations")
}
