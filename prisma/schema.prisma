generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                 Int                                  @id @default(autoincrement())
  email                              String
  password                           String
  username                           String
  roleId                             Int
  role                               Role                                 @relation(fields: [roleId], references: [id])
  profile                            Profile?
  isActive                           Boolean                              @default(true)
  isDeleted                          Boolean                              @default(false)
  dateDeleted                        DateTime?
  createdAt                          DateTime                             @default(now())
  updatedAt                          DateTime                             @updatedAt
  Specialties                        Specialties[]
  Scopes                             Scopes[]
  Subscopes                          Subscopes[]
  Cerifications                      Certifications[]
  companies                          Company[]
  CompanyCertifications              CompanyCertifications[]
  CompanySpecialties                 CompanySpecialties[]
  CompanyUser                        CompanyUser[]
  Clients                            Clients[]
  ProjectRequest                     ProjectRequest[]
  RequirementCertification           RequirementCertification[]
  RequirementSpecialty               RequirementSpecialty[]
  ProjectRequestCompany              ProjectRequestCompany[]
  ProjectRequestRequirementDocuments ProjectRequestRequirementDocuments[]
  ProjectRequestRequirementQuotation ProjectRequestRequirementQuotation[]
  StatusProjectRequest               StatusProjectRequest[]
  ProjectRequirements                ProjectRequirements[]
  QuotationSegment                   QuotationSegment[]
  ClientQuotationSummary             ClientQuotationSummary[]
  ProjectRequestCompanyStatusLog     ProjectRequestCompanyStatusLog[]
  ClientCompanyNDA                   ClientCompanyNDA[]
  UserLogReadStatus                  UserLogReadStatus[]
  ProjectStatus                      ProjectStatus[]
  Project                            Project[]
  ProjectCategory                    ProjectCategory[]
  ProjectCategoryActivityStatus      ProjectCategoryActivityStatus[]
  ProjectCategoryActivity            ProjectCategoryActivity[]
  ProjectLog                         ProjectLog[]

  @@unique([email, isDeleted])
  @@unique([username, isDeleted])
  @@index([isDeleted, isActive])
  @@map("d_users")
}

model Specialties {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique
  num                  Int                    @unique
  description          String?
  isActive             Boolean                @default(true)
  isDeleted            Boolean                @default(false)
  dateDeleted          DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  userId               Int
  user                 User                   @relation(fields: [userId], references: [id])
  Scopes               Scopes[]
  CompanySpecialties   CompanySpecialties[]
  RequirementSpecialty RequirementSpecialty[]

  @@index([isDeleted, isActive])
  @@map("c_specialties")
}

model Scopes {
  id                   Int                    @id @default(autoincrement())
  name                 String
  num                  Int
  description          String?
  isActive             Boolean                @default(true)
  isDeleted            Boolean                @default(false)
  dateDeleted          DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  userId               Int
  specialtyId          Int
  user                 User                   @relation(fields: [userId], references: [id])
  specialty            Specialties            @relation(fields: [specialtyId], references: [id])
  Subscopes            Subscopes[]
  CompanySpecialties   CompanySpecialties[]
  RequirementSpecialty RequirementSpecialty[]

  @@unique([name, specialtyId], name: "unique_name_per_specialty")
  @@index([isDeleted, isActive])
  @@map("c_scopes")
}

model Subscopes {
  id                   Int                    @id @default(autoincrement())
  name                 String
  num                  Int
  isActive             Boolean                @default(true)
  isDeleted            Boolean                @default(false)
  dateDeleted          DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  userId               Int
  scopeId              Int
  user                 User                   @relation(fields: [userId], references: [id])
  scope                Scopes                 @relation(fields: [scopeId], references: [id])
  CompanySpecialties   CompanySpecialties[]
  RequirementSpecialty RequirementSpecialty[]

  @@unique([name, scopeId], name: "unique_name_per_scope")
  @@index([isDeleted, isActive])
  @@map("c_subscopes")
}

model Certifications {
  id                        Int                        @id @default(autoincrement())
  name                      String                     @unique
  description               String?
  isActive                  Boolean                    @default(true)
  isDeleted                 Boolean                    @default(false)
  dateDeleted               DateTime?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  userId                    Int
  user                      User                       @relation(fields: [userId], references: [id])
  CompanyCertifications     CompanyCertifications[]
  requirementCertifications RequirementCertification[]

  @@index([isDeleted, isActive])
  @@map("c_certifications")
}

model Profile {
  id              Int     @id @default(autoincrement())
  name            String
  first_lastname  String
  second_lastname String?
  phone           String?
  image_profile   String?
  userId          Int     @unique
  user            User    @relation(fields: [userId], references: [id])

  @@map("d_profiles")
}

model Role {
  id         Int             @id @default(autoincrement())
  name       String          @unique
  prefix     String
  users      User[]
  privileges RolePrivilege[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@map("c_roles")
}

model RolePrivilege {
  id          Int       @id @default(autoincrement())
  roleId      Int
  privilegeId Int
  role        Role      @relation(fields: [roleId], references: [id])
  privilege   Privilege @relation(fields: [privilegeId], references: [id])

  @@unique([roleId, privilegeId])
  @@map("r_role_privileges")
}

model Privilege {
  id        Int             @id @default(autoincrement())
  name      String          @unique
  roles     RolePrivilege[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("c_privileges")
}

model LocationState {
  id        Int       @id @default(autoincrement())
  name      String
  country   String    @default("México")
  companies Company[]

  @@unique([name, country], name: "name_country")
  @@map("c_location_states")
}

// Empresa
model Company {
  id                     Int                     @id @default(autoincrement())
  companyName            String                  @unique
  comercialName          String                  @unique
  contactName            String
  street                 String
  externalNumber         String
  internalNumber         String?
  neighborhood           String
  postalCode             String
  city                   String
  stateId                Int
  phone                  String
  website                String?
  email                  String                  @unique
  machineCount           Int
  employeeCount          Int
  shifts                 String?
  achievementDescription String?
  profile                String?
  shiftsProfileLink      String?
  nda                    Bytes?
  ndaFileName            String?
  companyLogo            String?
  isActive               Boolean                 @default(true)
  isDeleted              Boolean                 @default(false)
  dateDeleted            DateTime?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  userId                 Int?
  user                   User?                   @relation(fields: [userId], references: [id])
  locationState          LocationState           @relation(fields: [stateId], references: [id])
  CompanyCertifications  CompanyCertifications[]
  CompanySpecialties     CompanySpecialties[]
  CompanyUser            CompanyUser[]
  ProjectRequestCompany  ProjectRequestCompany[]
  ClientCompanyNDA       ClientCompanyNDA[]

  @@index([isDeleted, isActive])
  @@map("d_companies")
}

// Relación entre empresas y certificaciones
model CompanyCertifications {
  id                  Int            @id @default(autoincrement())
  companyId           Int
  certificationId     Int
  certificateFile     Bytes?
  certificateFileName String?
  expirationDate      DateTime?      @db.Date
  isCommitment        Boolean        @default(false)
  commitmentDate      DateTime?      @db.Date
  isActive            Boolean        @default(true)
  isDeleted           Boolean        @default(false)
  dateDeleted         DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  userId              Int
  user                User           @relation(fields: [userId], references: [id])
  company             Company        @relation(fields: [companyId], references: [id])
  certification       Certifications @relation(fields: [certificationId], references: [id])

  @@index([isDeleted, isActive])
  @@index([companyId, certificationId, expirationDate])
  @@map("r_company_certifications")
}

// Relación entre empresas y especialidades
model CompanySpecialties {
  id              Int         @id @default(autoincrement())
  companyId       Int
  specialtyId     Int
  scopeId         Int?
  subscopeId      Int?
  materials       String?
  machineCapacity String?
  isActive        Boolean     @default(true)
  isDeleted       Boolean     @default(false)
  dateDeleted     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  company         Company     @relation(fields: [companyId], references: [id])
  specialty       Specialties @relation(fields: [specialtyId], references: [id])
  scope           Scopes?     @relation(fields: [scopeId], references: [id])
  subscope        Subscopes?  @relation(fields: [subscopeId], references: [id])

  @@unique([companyId, specialtyId, scopeId, subscopeId])
  @@index([isDeleted, isActive])
  @@map("r_company_specialties")
}

// Relación entre empresas y usuarios
model CompanyUser {
  id          Int       @id @default(autoincrement())
  companyId   Int
  userId      Int
  roleCompany String? // Rol dentro de la empresa
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  dateDeleted DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  company     Company   @relation(fields: [companyId], references: [id])

  @@unique([companyId, userId])
  @@index([isDeleted, isActive])
  @@map("r_company_users")
}

// Vista para reporte de empresas, ver prisma/sql/create_views.sql
/**
 * model CompanyProfile {
 * id                   Int     @id
 * nombre_comercial     String
 * razon_social         String
 * logros               String?
 * semblanza            String?
 * contato_ventas       String?
 * maquinas_principales Int?
 * total_empleados      Int?
 * telefono             String?
 * correo               String?
 * liga_semblanza       String?
 * sitio_web            String?
 * certificaciones      Json
 * especialidades       Json
 * @@map("v_companies_overview") // Hace referencia a la vista en la BD
 * @@ignore
 * }
 */
//----------------------------------------------------

//------------------ SOLICITUDES ---------------------

// Tipos de proyecto
model ProjectTypes {
  id                                 Int                                  @id @default(autoincrement())
  name                               String                               @unique
  isActive                           Boolean                              @default(true)
  isDeleted                          Boolean                              @default(false)
  dateDeleted                        DateTime?
  createdAt                          DateTime                             @default(now())
  updatedAt                          DateTime                             @updatedAt
  // Project     Project[]
  ProjectRequestRequirementQuotation ProjectRequestRequirementQuotation[]

  @@index([isDeleted, isActive])
  @@map("c_project_types")
}

// Empresas cliente
model Clients {
  id                 Int                @id @default(autoincrement())
  name               String
  registered_address String
  rfc                String
  isActive           Boolean            @default(true)
  isDeleted          Boolean            @default(false)
  dateDeleted        DateTime?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  userId             Int
  user               User               @relation(fields: [userId], references: [id])
  //Project            Project[]
  ClientAreas        ClientAreas[]
  ClientCompanyNDA   ClientCompanyNDA[]

  @@index([isDeleted, isActive])
  @@map("c_clients")
}

model ClientAreas {
  id             Int              @id @default(autoincrement())
  clientId       Int
  areaName       String
  contactName    String
  contactEmail   String
  contactPhone   String
  observations   String?
  isActive       Boolean          @default(true)
  isDeleted      Boolean          @default(false)
  dateDeleted    DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  client         Clients          @relation(fields: [clientId], references: [id])
  ProjectRequest ProjectRequest[]

  @@map("c_client_areas")
}

// Modelo de status de solicitud de proyectos
model StatusProjectRequest {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  isActive              Boolean                 @default(true)
  isDeleted             Boolean                 @default(false)
  dateDeleted           DateTime?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  userId                Int
  user                  User                    @relation(fields: [userId], references: [id])
  ProjectRequest        ProjectRequest[]
  ProjectRequestCompany ProjectRequestCompany[]
  ProjectRequirements   ProjectRequirements[]

  @@index([isDeleted, isActive])
  @@map("c_status_project_requests")
}

// Modelo de solicitud de proyectos
model ProjectRequest {
  id           Int         @id @default(autoincrement())
  title        String
  requestDate  DateTime    @default(now())
  observation  String?
  statusId     Int         @default(1)
  isActive     Boolean     @default(true)
  isDeleted    Boolean     @default(false)
  dateDeleted  DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userId       Int
  user         User        @relation(fields: [userId], references: [id])
  clientAreaId Int
  clientArea   ClientAreas @relation(fields: [clientAreaId], references: [id])

  ProjectRequirements    ProjectRequirements[]
  ClientQuotationSummary ClientQuotationSummary[]
  status                 StatusProjectRequest     @relation(fields: [statusId], references: [id])

  @@index([isDeleted, isActive])
  @@map("d_project_requests")
}

// Requisitos de cada solicitud de proyecto
model ProjectRequirements {
  id                       Int                        @id @default(autoincrement())
  projectRequestId         Int
  requirementName          String
  piecesNumber             Int?
  observation              String?
  statusId                 Int                        @default(1)
  status                   StatusProjectRequest       @relation(fields: [statusId], references: [id])
  isActive                 Boolean                    @default(true)
  isDeleted                Boolean                    @default(false)
  dateDeleted              DateTime?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  userId                   Int
  user                     User                       @relation(fields: [userId], references: [id])
  ProjectRequest           ProjectRequest             @relation(fields: [projectRequestId], references: [id])
  RequirementCertification RequirementCertification[]
  RequirementSpecialty     RequirementSpecialty[]
  ProjectRequestCompany    ProjectRequestCompany[]

  @@index([isDeleted, isActive])
  @@map("d_project_requirements")
}

// Certificaciones requeridas por el proyecto
model RequirementCertification {
  id                    Int                 @id @default(autoincrement())
  projectRequirementsId Int
  certificationId       Int
  observation           String?
  isActive              Boolean             @default(true)
  isDeleted             Boolean             @default(false)
  dateDeleted           DateTime?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  userId                Int
  user                  User                @relation(fields: [userId], references: [id])
  ProjectRequirements   ProjectRequirements @relation(fields: [projectRequirementsId], references: [id])
  certification         Certifications      @relation(fields: [certificationId], references: [id])
  projectRequestId      Int?

  @@index([isDeleted, isActive])
  @@map("d_project_request_certifications")
}

// Especialidades requeridas por el proyecto
model RequirementSpecialty {
  id                    Int       @id @default(autoincrement())
  projectRequirementsId Int
  specialtyId           Int
  scopeId               Int?
  subscopeId            Int?
  observation           String?
  isActive              Boolean   @default(true)
  isDeleted             Boolean   @default(false)
  dateDeleted           DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  userId                Int
  user                  User      @relation(fields: [userId], references: [id])

  specialty Specialties @relation(fields: [specialtyId], references: [id])
  scope     Scopes?     @relation(fields: [scopeId], references: [id])
  subscope  Subscopes?  @relation(fields: [subscopeId], references: [id])

  ProjectRequirements ProjectRequirements @relation(fields: [projectRequirementsId], references: [id])

  @@index([isDeleted, isActive])
  @@map("d_project_request_specialties")
}

//NDA Asociados-Clientes

model ClientCompanyNDA {
  id                Int       @id @default(autoincrement())
  clientId          Int
  companyId         Int
  ndaSignedFile     Bytes
  ndaSignedFileName String
  ndaExpirationDate DateTime
  isActive          Boolean   @default(true)
  isDeleted         Boolean   @default(false)
  dateDeleted       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            Int
  user              User      @relation(fields: [userId], references: [id])
  Client            Clients   @relation(fields: [clientId], references: [id])
  Company           Company   @relation(fields: [companyId], references: [id])

  @@index([isDeleted, isActive])
  @@map("d_client_company_ndas")
}

// Asociados que cumplen los requisitos
model ProjectRequestCompany {
  id                             Int                                  @id @default(autoincrement())
  companyId                      Int
  projectRequirementsId          Int
  statusId                       Int                                  @default(1)
  status                         StatusProjectRequest                 @relation(fields: [statusId], references: [id])
  isActive                       Boolean                              @default(true)
  isDeleted                      Boolean                              @default(false)
  dateDeleted                    DateTime?
  createdAt                      DateTime                             @default(now())
  updatedAt                      DateTime                             @updatedAt
  userId                         Int
  user                           User                                 @relation(fields: [userId], references: [id])
  Company                        Company                              @relation(fields: [companyId], references: [id])
  ProjectRequirements            ProjectRequirements                  @relation(fields: [projectRequirementsId], references: [id])
  Quotation                      ProjectRequestRequirementQuotation?
  Documents                      ProjectRequestRequirementDocuments[]
  ProjectRequestCompanyStatusLog ProjectRequestCompanyStatusLog[]
  Project                        Project?                             @relation(fields: [projectId], references: [id])
  projectId                      Int?

  @@index([isDeleted, isActive])
  @@map("d_project_request_companies")
}

// Documentación técnica enviada por el cliente (solo si hay un NDA firmado)
model ProjectRequestRequirementDocuments {
  id                      Int       @id @default(autoincrement())
  projectRequestCompanyId Int
  documentFile            Bytes?
  documentFileName        String?
  isActive                Boolean   @default(true)
  isDeleted               Boolean   @default(false)
  dateDeleted             DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  userId                  Int
  user                    User      @relation(fields: [userId], references: [id])

  ProjectRequestCompany ProjectRequestCompany @relation(fields: [projectRequestCompanyId], references: [id])

  @@index([projectRequestCompanyId])
  @@index([isDeleted, isActive])
  @@map("d_project_request_documents")
}

// Cotización por cada asociado por requerimiento
model ProjectRequestRequirementQuotation {
  id                      Int       @id @default(autoincrement())
  projectRequestCompanyId Int       @unique
  materialCost            Float?
  directCost              Float?
  indirectCost            Float?
  price                   Float?
  projectTypesId          Int       @default(1)
  additionalDetails       String?
  quotationFile           Bytes?
  quotationFileName       String?
  isClientSelected        Boolean   @default(false)
  isClientApproved        Boolean   @default(false)
  nonApprovalReason       String?
  isActive                Boolean   @default(true)
  isDeleted               Boolean   @default(false)
  dateDeleted             DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  userId                  Int
  user                    User      @relation(fields: [userId], references: [id])

  ProjectRequestCompany ProjectRequestCompany @relation(fields: [projectRequestCompanyId], references: [id])
  QuotationSegment      QuotationSegment[]
  ProjectType           ProjectTypes          @relation(fields: [projectTypesId], references: [id])

  @@index([isDeleted, isActive])
  @@map("d_project_request_quotations")
}

// Segmentos de cotización para propuestas planificadas
model QuotationSegment {
  id                                   Int       @id @default(autoincrement())
  projectRequestRequirementQuotationId Int
  estimatedDeliveryDate                DateTime
  description                          String
  isActive                             Boolean   @default(true)
  isDeleted                            Boolean   @default(false)
  dateDeleted                          DateTime?
  createdAt                            DateTime  @default(now())
  updatedAt                            DateTime  @updatedAt
  userId                               Int
  user                                 User      @relation(fields: [userId], references: [id])

  ProjectRequestRequirementQuotation ProjectRequestRequirementQuotation @relation(fields: [projectRequestRequirementQuotationId], references: [id])

  @@index([isDeleted, isActive])
  @@map("d_quotation_segments")
}

// Resumen de cotizaciones para Clientes
model ClientQuotationSummary {
  id                  Int       @id @default(autoincrement())
  projectRequestId    Int
  quotationFile       Bytes?
  quotationFileName   String?
  dateQuotationClient DateTime
  dateQuotationSent   DateTime?
  clientPrice         Float     @default(0)
  observations        String?
  isActive            Boolean   @default(true)
  isDeleted           Boolean   @default(false)
  dateDeleted         DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  userId              Int
  user                User      @relation(fields: [userId], references: [id])

  ProjectRequest ProjectRequest @relation(fields: [projectRequestId], references: [id])

  @@index([isDeleted, isActive])
  @@map("d_client_quotation_summaries")
}

//logs de estatus de cotizaciones
model ProjectRequestCompanyStatusLog {
  id                      Int       @id @default(autoincrement())
  projectRequestCompanyId Int
  dateTimeMessage         DateTime  @default(now())
  message                 String
  isActive                Boolean   @default(true)
  isDeleted               Boolean   @default(false)
  dateDeleted             DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  userId                  Int
  user                    User      @relation(fields: [userId], references: [id])

  ProjectRequestCompany ProjectRequestCompany @relation(fields: [projectRequestCompanyId], references: [id])
  UserLogReadStatus     UserLogReadStatus[]

  @@index([isDeleted, isActive])
  @@map("d_project_request_company_status_logs")
}

// Registra el estado de lectura de logs para bitácora
model UserLogReadStatus {
  id        Int                            @id @default(autoincrement())
  logId     Int
  isRead    Boolean                        @default(false)
  readAt    DateTime?
  createdAt DateTime                       @default(now())
  updatedAt DateTime                       @updatedAt
  userId    Int
  user      User                           @relation(fields: [userId], references: [id])
  log       ProjectRequestCompanyStatusLog @relation(fields: [logId], references: [id])

  @@unique([userId, logId])
  @@index([userId, isRead])
  @@map("d_user_log_read_status")
}

//------------------------PROYECTO----------------------------------

// Estatus de proyectos
model ProjectStatus {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @unique
  description             String?
  isActive                Boolean                   @default(true)
  isDeleted               Boolean                   @default(false)
  dateDeleted             DateTime?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  userId                  Int
  user                    User                      @relation(fields: [userId], references: [id])
  ProjectCategoryActivity ProjectCategoryActivity[]

  @@map("d_project_status")
}

// Proyectos
model Project {
  id                    Int                     @id @default(autoincrement())
  id_company            String                  @unique
  id_project_request    String?
  project_status        Boolean                 @default(true)
  project_observations  String?
  isDeleted             Boolean                 @default(false)
  dateDeleted           DateTime?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  userId                Int
  user                  User                    @relation(fields: [userId], references: [id])
  ProjectRequestCompany ProjectRequestCompany[]

  @@map("d_proyects")
}

// Categorias de proyecto
model ProjectCategory {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @unique
  description             String?
  isActive                Boolean                   @default(true)
  isDeleted               Boolean                   @default(false)
  dateDeleted             DateTime?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  userId                  Int
  user                    User                      @relation(fields: [userId], references: [id])
  ProjectCategoryActivity ProjectCategoryActivity[]
  ProjectLog              ProjectLog[]

  @@map("d_project_categories")
}

// Estatus actividades de categoria
model ProjectCategoryActivityStatus {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @unique
  isActive                Boolean                   @default(true)
  isDeleted               Boolean                   @default(false)
  dateDeleted             DateTime?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  userId                  Int
  user                    User                      @relation(fields: [userId], references: [id])
  ProjectCategoryActivity ProjectCategoryActivity[]

  @@map("d_project_category_activity_status")
}

// Actividades de categoría
model ProjectCategoryActivity {
  id                 Int       @id @default(autoincrement())
  name               String    @unique
  description        String?
  projectCategoryId  Int
  dateTentativeStart DateTime?
  dateTentativeEnd   DateTime?
  observations       String?
  activityStatusId   Int
  isActive           Boolean   @default(true)
  isDeleted          Boolean   @default(false)
  dateDeleted        DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  userId             Int
  user               User      @relation(fields: [userId], references: [id])
  projectStatusId    Int?

  activityStatus  ProjectCategoryActivityStatus @relation(fields: [activityStatusId], references: [id])
  projectCategory ProjectCategory               @relation(fields: [projectCategoryId], references: [id])
  ProjectStatus   ProjectStatus?                @relation(fields: [projectStatusId], references: [id])

  @@map("d_project_category_activities")
}

// Bitacora de proyecto
model ProjectLog {
  id                Int             @id @default(autoincrement())
  projectCategoryId Int
  projectCategory   ProjectCategory @relation(fields: [projectCategoryId], references: [id])
  dateTimeMessage   DateTime        @default(now())
  message           String
  isRead            Boolean         @default(false)
  readAt            DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  userId            Int
  user              User            @relation(fields: [userId], references: [id])

  @@map("d_project_logs")
}
