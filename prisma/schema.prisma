generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                     @id @default(autoincrement())
  email                 String                  @unique
  password              String
  username              String                  @unique
  roleId                Int
  role                  Role                    @relation(fields: [roleId], references: [id])
  profile               Profile?
  companyUser           CompanyUser?
  mustChangePassword    Boolean                 @default(false)
  isActive              Boolean                 @default(true)
  isDeleted             Boolean                 @default(false)
  dateDeleted           DateTime?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  Specialties           Specialties[]
  Scopes                Scopes[]
  Subscopes             Subscopes[]
  Cerifications         Certifications[]
  CompanyCertifications CompanyCertifications[]
  CompanySpecialties    CompanySpecialties[]
  Company               Company[]

  @@index([isDeleted, isActive])
  @@map("d_users")
}

model Specialties {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  num                Int                  @unique
  description        String?
  isActive           Boolean              @default(true)
  isDeleted          Boolean              @default(false)
  dateDeleted        DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  userId             Int
  user               User                 @relation(fields: [userId], references: [id])
  Scopes             Scopes[]
  CompanySpecialties CompanySpecialties[]

  @@index([isDeleted, isActive])
  @@map("c_specialties")
}

model Scopes {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  num                Int
  description        String?
  isActive           Boolean              @default(true)
  isDeleted          Boolean              @default(false)
  dateDeleted        DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  userId             Int
  specialtyId        Int
  user               User                 @relation(fields: [userId], references: [id])
  specialty          Specialties          @relation(fields: [specialtyId], references: [id])
  Subscopes          Subscopes[]
  CompanySpecialties CompanySpecialties[]

  @@index([isDeleted, isActive])
  @@map("c_scopes")
}

model Subscopes {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  num                Int
  isActive           Boolean              @default(true)
  isDeleted          Boolean              @default(false)
  dateDeleted        DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  userId             Int
  scopeId            Int
  user               User                 @relation(fields: [userId], references: [id])
  scope              Scopes               @relation(fields: [scopeId], references: [id])
  CompanySpecialties CompanySpecialties[]

  @@index([isDeleted, isActive])
  @@map("c_subscopes")
}

model Certifications {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  description           String?
  isActive              Boolean                 @default(true)
  isDeleted             Boolean                 @default(false)
  dateDeleted           DateTime?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  userId                Int
  user                  User                    @relation(fields: [userId], references: [id])
  CompanyCertifications CompanyCertifications[]

  @@index([isDeleted, isActive])
  @@map("c_certifications")
}

model Profile {
  id              Int     @id @default(autoincrement())
  name            String
  first_lastname  String
  second_lastname String?
  phone           String?
  image_profile   String?
  userId          Int     @unique
  user            User    @relation(fields: [userId], references: [id])

  @@map("d_profiles")
}

model Role {
  id         Int             @id @default(autoincrement())
  name       String          @unique
  prefix     String
  users      User[]
  privileges RolePrivilege[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@map("c_roles")
}

model RolePrivilege {
  id          Int       @id @default(autoincrement())
  roleId      Int
  privilegeId Int
  role        Role      @relation(fields: [roleId], references: [id])
  privilege   Privilege @relation(fields: [privilegeId], references: [id])

  @@unique([roleId, privilegeId])
  @@map("r_role_privileges")
}

model Privilege {
  id        Int             @id @default(autoincrement())
  name      String          @unique
  roles     RolePrivilege[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("c_privileges")
}

model LocationState {
  id        Int       @id @default(autoincrement())
  name      String
  country   String    @default("MÃ©xico")
  companies Company[]

  @@unique([name, country], name: "name_country")
  @@map("c_location_states")
}

model Company {
  id                     Int                     @id @default(autoincrement())
  companyName            String                  @unique
  contactName            String
  street                 String
  externalNumber         String
  internalNumber         String?
  neighborhood           String
  postalCode             String
  city                   String
  stateId                Int
  phone                  String
  email                  String                  @unique
  machineCount           Int
  employeeCount          Int
  shifts                 String?
  achievementDescription String?
  profile                String?
  nda                    Bytes?
  ndaFileName            String?
  companyLogo            String?
  isActive               Boolean                 @default(true)
  isDeleted              Boolean                 @default(false)
  dateDeleted            DateTime?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  userId                 Int?
  user                   User?                   @relation(fields: [userId], references: [id])
  locationState          LocationState           @relation(fields: [stateId], references: [id])
  CompanyCertifications  CompanyCertifications[]
  CompanySpecialties     CompanySpecialties[]
  companyUsers           CompanyUser[]

  @@index([isDeleted, isActive])
  @@map("d_companies")
}

model CompanyUser {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  companyId   Int
  role        String    @default("STAFF")
  isAdmin     Boolean   @default(false)
  position    String?
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  dateDeleted DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  company     Company   @relation(fields: [companyId], references: [id])

  @@index([isDeleted, isActive])
  @@map("r_company_users")
}

model CompanyCertifications {
  id                  Int            @id @default(autoincrement())
  companyId           Int
  certificationId     Int
  certificateFile     Bytes?
  certificateFileName String?
  expirationDate      DateTime       @db.Date
  isActive            Boolean        @default(true)
  isDeleted           Boolean        @default(false)
  dateDeleted         DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  userId              Int
  user                User           @relation(fields: [userId], references: [id])
  company             Company        @relation(fields: [companyId], references: [id])
  certification       Certifications @relation(fields: [certificationId], references: [id])

  @@index([isDeleted, isActive])
  @@index([companyId, certificationId, expirationDate])
  @@map("r_company_certifications")
}

model CompanySpecialties {
  id          Int         @id @default(autoincrement())
  companyId   Int
  specialtyId Int
  scopeId     Int?
  subscopeId  Int?
  materials   String?
  isActive    Boolean     @default(true)
  isDeleted   Boolean     @default(false)
  dateDeleted DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  company     Company     @relation(fields: [companyId], references: [id])
  specialty   Specialties @relation(fields: [specialtyId], references: [id])
  scope       Scopes?     @relation(fields: [scopeId], references: [id])
  subscope    Subscopes?  @relation(fields: [subscopeId], references: [id])

  @@unique([companyId, specialtyId, scopeId, subscopeId])
  @@index([isDeleted, isActive])
  @@map("r_company_specialties")
}
