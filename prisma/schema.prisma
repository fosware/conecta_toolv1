generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  email         String           @unique
  password      String
  username      String           @unique
  roleId        Int
  role          Role             @relation(fields: [roleId], references: [id])
  profile       Profile?
  isActive      Boolean          @default(true)
  isDeleted     Boolean          @default(false)
  dateDeleted   DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  Specialties   Specialties[]
  Scopes        Scopes[]
  Subscopes     Subscopes[]
  Cerifications Certifications[]

  @@map("d_users")
}

model Specialties {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  num         Int      @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  Scopes      Scopes[]

  @@map("d_specialties")
}

model Scopes {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  num         Int
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  specialtyId Int

  user      User        @relation(fields: [userId], references: [id])
  specialty Specialties @relation(fields: [specialtyId], references: [id])
  Subscopes Subscopes[]

  @@map("d_scopes")
}

model Subscopes {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  num       Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  scopeId   Int

  user  User   @relation(fields: [userId], references: [id])
  scope Scopes @relation(fields: [scopeId], references: [id])

  @@map("d_subscopes")
}

model Certifications {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  dateDeleted DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int

  user User @relation(fields: [userId], references: [id])

  @@map("c_certifications")
}

model Profile {
  id              Int     @id @default(autoincrement())
  name            String
  first_lastname  String
  second_lastname String?
  phone           String?
  image_profile   String?
  userId          Int     @unique
  user            User    @relation(fields: [userId], references: [id])

  @@map("d_profiles")
}

model Role {
  id         Int             @id @default(autoincrement())
  name       String          @unique
  prefix     String
  users      User[]
  privileges RolePrivilege[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@map("c_roles")
}

model RolePrivilege {
  id          Int       @id @default(autoincrement())
  roleId      Int
  privilegeId Int
  role        Role      @relation(fields: [roleId], references: [id])
  privilege   Privilege @relation(fields: [privilegeId], references: [id])

  @@unique([roleId, privilegeId]) // Asegura combinaciones Ãºnicas
  @@map("r_role_privileges")
}

model Privilege {
  id        Int             @id @default(autoincrement())
  name      String          @unique
  roles     RolePrivilege[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("c_privileges")
}

// npx prisma migrate dev --name init
// npx prisma generate
// npm run prisma:seed
