generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                       @id @default(autoincrement())
  email                   String                    @unique
  password                String
  username                String                    @unique
  roleId                  Int
  role                    Role                      @relation(fields: [roleId], references: [id])
  profile                 Profile?
  isActive                Boolean                   @default(true)
  isDeleted               Boolean                   @default(false)
  dateDeleted             DateTime?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  Specialties             Specialties[]
  Scopes                  Scopes[]
  Subscopes               Subscopes[]
  Cerifications           Certifications[]
  Associate               Associate[]
  AssociateCertifications AssociateCertifications[]
  AssociateSpecialties    AssociateSpecialties[]

  @@index([isDeleted, isActive])
  @@map("d_users")
}

model Specialties {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  num             Int               @unique
  description     String?
  isActive        Boolean           @default(true)
  isDeleted       Boolean           @default(false)
  dateDeleted     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  userId          Int
  user            User              @relation(fields: [userId], references: [id])
  Scopes          Scopes[]
  AssociateSpecialties AssociateSpecialties[]

  @@index([isDeleted, isActive])
  @@map("c_specialties")
}

model Scopes {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  num         Int
  description String?
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  dateDeleted DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int
  specialtyId Int

  user            User              @relation(fields: [userId], references: [id])
  specialty       Specialties       @relation(fields: [specialtyId], references: [id])
  Subscopes       Subscopes[]
  AssociateSpecialties AssociateSpecialties[]

  @@index([isDeleted, isActive])
  @@map("c_scopes")
}

model Subscopes {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  num         Int
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  dateDeleted DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int
  scopeId     Int

  user            User              @relation(fields: [userId], references: [id])
  scope           Scopes            @relation(fields: [scopeId], references: [id])
  AssociateSpecialties AssociateSpecialties[]

  @@index([isDeleted, isActive])
  @@map("c_subscopes")
}

model Certifications {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  dateDeleted DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int

  user                    User                      @relation(fields: [userId], references: [id])
  AssociateCertifications AssociateCertifications[]

  @@index([isDeleted, isActive])
  @@map("c_certifications")
}

model Profile {
  id              Int     @id @default(autoincrement())
  name            String
  first_lastname  String
  second_lastname String?
  phone           String?
  image_profile   String?
  userId          Int     @unique
  user            User    @relation(fields: [userId], references: [id])

  @@map("d_profiles")
}

model Role {
  id         Int             @id @default(autoincrement())
  name       String          @unique
  prefix     String
  users      User[]
  privileges RolePrivilege[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@map("c_roles")
}

model RolePrivilege {
  id          Int       @id @default(autoincrement())
  roleId      Int
  privilegeId Int
  role        Role      @relation(fields: [roleId], references: [id])
  privilege   Privilege @relation(fields: [privilegeId], references: [id])

  @@unique([roleId, privilegeId]) // Asegura combinaciones únicas
  @@map("r_role_privileges")
}

model Privilege {
  id        Int             @id @default(autoincrement())
  name      String          @unique
  roles     RolePrivilege[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("c_privileges")
}

model LocationState {
  id         Int         @id @default(autoincrement())
  name       String
  country    String      @default("México")
  associates Associate[]

  @@unique([name, country], name: "name_country")
  @@map("c_location_states")
}

// Asociados
model Associate {
  id                      Int                       @id @default(autoincrement()) // Primary Key
  companyName             String                    @unique
  contactName             String
  street                  String
  externalNumber          String
  internalNumber          String? // Optional
  neighborhood            String
  postalCode              String
  city                    String
  stateId                 Int
  phone                   String
  email                   String                    @unique
  machineCount            Int
  employeeCount           Int
  shifts                  String?
  achievementDescription  String?
  profile                 String? //semblanza
  nda                     Bytes?
  ndaFileName             String?
  companyLogo             String?
  isActive                Boolean                   @default(true)
  isDeleted               Boolean                   @default(false)
  dateDeleted             DateTime?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  userId                  Int?
  user                    User?                     @relation(fields: [userId], references: [id])
  locationState           LocationState             @relation(fields: [stateId], references: [id])
  AssociateCertifications AssociateCertifications[]
  AssociateSpecialties    AssociateSpecialties[]

  @@index([email])
  @@index([companyName])
  @@index([isDeleted, isActive])
  @@map("d_associates") // Table name in the database
}

model AssociateCertifications {
  id                    Int       @id @default(autoincrement()) // Primary Key
  associateId           Int
  certificationId       Int
  certificationFile     Bytes
  certificationFileName String
  expiryDate            DateTime
  isActive              Boolean   @default(true)
  isDeleted             Boolean   @default(false)
  dateDeleted           DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  userId                Int
  user                  User      @relation(fields: [userId], references: [id])

  certification Certifications @relation(fields: [certificationId], references: [id])
  associate     Associate      @relation(fields: [associateId], references: [id])

  @@index([isDeleted, isActive])
  @@map("rel_associate_certifications")
}

model AssociateSpecialties {
  id          Int       @id @default(autoincrement())
  associateId Int
  specialtyId Int
  scopeId     Int?
  subscopeId  Int?
  materials   String?   @db.Text
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  dateDeleted DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int

  associate Associate   @relation(fields: [associateId], references: [id])
  specialty Specialties @relation(fields: [specialtyId], references: [id])
  scope     Scopes?     @relation(fields: [scopeId], references: [id])
  subscope  Subscopes?  @relation(fields: [subscopeId], references: [id])
  user      User        @relation(fields: [userId], references: [id])

  @@index([associateId])
  @@index([specialtyId])
  @@index([scopeId])
  @@index([subscopeId])
  @@index([userId])
  @@map("rel_associate_specialties")
}

// npx prisma migrate dev --name init
// npx prisma generate
// npm run prisma:seed
